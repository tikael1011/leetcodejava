
/*
Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.

Examples:

s = "leetcode"
return 0.

s = "loveleetcode",
return 2.
Note: You may assume the string contain only lowercase letters.
*/

//two pass solution

/*
class Solution(object):
    def firstUniqChar(self, s):

        d = {}
        for c in s:
            if c in d.keys():
                d[c] += 1
            else:
                d[c] = 1

        for i in range(len(s)):
            c = s[i]
            if d[c]==1:
                return i

        return -1 
*/

//one-liner python, which is like 8~9 times faster (why?)
//this brilliant
//return min([s.find(c) for c in string.ascii_lowercase if s.count(c)==1] or [-1])

//java two solution is easy to implement, just use an int array, of which size is [256] to count
//size can be 26, if necessary.

public class Solution {
    public int firstUniqChar(String s) {
        int freq [] = new int[256];
        for(int i = 0; i < s.length(); i ++)
            freq [s.charAt(i) - 'a'] ++;
        for(int i = 0; i < s.length(); i ++)
            if(freq [s.charAt(i) - 'a'] == 1)
                return i;
        return -1;
    }
}
